[toolchain]
channel = "1.68.2"
profile = "minimal"
components = [ "rustfmt","clippy","rust-analyzer"]

# profile.minimal
#   cargo — Cargo is a package manager and build tool.
#   rustc — The Rust compiler and Rustdoc.
#   rust-std — This is the Rust standard library. There is a separate rust-std component for each target that rustc supports, such as rust-std-x86_64-pc-windows-msvc. See the Cross-compilation chapter for more detail.
# profile.default
#   clippy — Clippy is a lint tool that provides extra checks for common mistakes and stylistic choices.
#   rust-docs — This is a local copy of the Rust documentation. Use the rustup doc command to open the documentation in a web browser. Run rustup doc --help for more options.
#   rustfmt — Rustfmt is a tool for automatically formatting code.
# profile.complete
#   rust-analyzer — rust-analyzer is a language server that provides support for editors and IDEs.
#   rls — RLS is a language server that is deprecated and has been replaced by rust-analyzer.
#   miri — Miri is an experimental Rust interpreter, which can be used for checking for undefined-behavior.
#   rust-src — This is a local copy of the source code of the Rust standard library.
#       This can be used by some tools, such as RLS, to provide auto-completion
#       for functions within the standard library; Miri which is a Rust interpreter;
#       and Cargo's experimental build-std feature, which allows you to rebuild the standard library locally.
#   rust-analysis — Metadata about the standard library, used by tools like RLS.
#   rust-mingw — This contains a linker and platform libraries for building on the x86_64-pc-windows-gnu platform.
#   llvm-tools-preview — This is an experimental component which contains a collection of LLVM tools.
#   rustc-dev — This component contains the compiler as a library. Most users will not need this; it is only needed for development of tools that link to the compiler, such as making modifications to Clippy.
